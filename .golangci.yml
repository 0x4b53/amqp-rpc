---
# This file contains all available configuration options
# with their default values.

# options for analysis running
run:
  # default concurrency is a available CPU number
  concurrency: 4

  # timeout for analysis, e.g. 30s, 5m, default is 1m
  deadline: 1m

  # exit code when at least one issue was found, default is 1
  issues-exit-code: 1

  # include test files or not, default is true
  tests: true

  # which dirs to skip: they won't be analyzed;
  # can use regexp here: generated.*, regexp is applied on full path;
  # default value is empty list, but next dirs are always skipped independently
  # from this option's value:
  #   	vendor$, third_party$, testdata$, examples$, Godeps$, builtin$
  skip-dirs:
    - vendor$

  # which files to skip: they will be analyzed, but issues from them
  # won't be reported. Default value is empty list, but there is
  # no need to include all autogenerated files, we confidently recognize
  # autogenerated files. If it's not please let us know.
  skip-files:

# output configuration options
output:
  # colored-line-number|line-number|json|tab|checkstyle|code-climate, default is
  # "colored-line-number"
  format: colored-line-number

  # print lines of code with issue, default is true
  print-issued-lines: false

  # print linter name in the end of issue text, default is true
  print-linter-name: true


# all available settings of specific linters
linters-settings:
  errcheck:
    # report about not checking of errors in type assetions: `a :=
    # b.(MyStruct)`; default is false: such cases aren't reported by default.
    check-type-assertions: false

    # report about assignment of errors to blank identifier: `num, _ :=
    # strconv.Atoi(numStr)`; default is false: such cases aren't reported by
    # default.
    check-blank: false

  govet:
    # report about shadowed variables
    check-shadowing: true
  golint:
    # minimal confidence for issues, default is 0.8
    min-confidence: 0.8
  gofmt:
    # simplify code: gofmt with `-s` option, true by default
    simplify: true
  goimports:
    # put imports beginning with prefix after 3rd-party packages;
    # it's a comma-separated list of prefixes
    # local-prefixes: github.com/org/project
  gocognit:
    # minimal code complexity to report, 30 by default (but we recommend 10-20)
    min-complexity: 10
  goconst:
    # minimal length of string constant, 3 by default
    min-len: 3
    # minimal occurrences count to trigger, 3 by default
    min-occurrences: 3
  depguard:
    list-type: blacklist
    include-go-root: false
    packages:
      - github.com/davecgh/go-spew/spew
      - github.com/c2fo/testify
  misspell:
    # Correct spellings using locale preferences for US or UK.
    # Default is to use a neutral variety of English.
    # Setting locale to US will correct the British spelling of 'colour' to
    # 'color'.
    locale: US
  unused:
    # treat code as a program (not a library) and report unused exported
    # identifiers; default is false. XXX: if you enable this setting, unused
    # will report a lot of false-positives in text editors: if it's called for
    # subdir of a project it can't find funcs usages. All text editor
    # integrations with golangci-lint call it on a directory with the changed
    # file.
    check-exported: false
  unparam:
    # Inspect exported functions, default is false. Set to true if no external
    # program/library imports your code. XXX: if you enable this setting,
    # unparam will report a lot of false-positives in text editors: if it's
    # called for subdir of a project it can't find external interfaces. All text
    # editor integrations with golangci-lint call it on a directory with the
    # changed file.
    check-exported: false
  gocritic:
    # Enable multiple checks by tags, run `GL_DEBUG=gocritic golangci-lint run`
    # to see all tags and checks. Empty list by default. See
    # https://github.com/go-critic/go-critic#usage -> section "Tags".
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - hugeParam
  dogsled:
    # checks assignments with too many blank identifiers; default is 2
    max-blank-identifiers: 2

  whitespace:
    multi-if: false
    multi-func: false
  wsl:
    # If true append is only allowed to be cuddled if appending value is
    # matching variables, fields or types on line above. Default is true.
    strict-append: true
    # Allow calls and assignments to be cuddled as long as the lines have any
    # matching variables, fields or types. Default is true.
    allow-assign-and-call: true
    # Allow multiline assignments to be cuddled. Default is true.
    allow-multiline-assign: true
    # Allow declarations (var) to be cuddled.
    allow-cuddle-declarations: false
    # Allow trailing comments in ending of blocks
    allow-trailing-comment: false
    # Force newlines in end of case at this limit (0 = never).
    force-case-trailing-whitespace: 0
    # Force cuddling of err checks with err var assignment
    force-err-cuddling: false # Turned off since we don't like multiline cuddle
    # Allow leading comments to be separated with empty liens
    allow-separated-leading-comment: false

linters:
  enable-all: true
  disable:
    - cyclop
    - dupl
    - exhaustivestruct
    - forbidigo
    - funlen
    - gci
    - gocognit
    - gocyclo
    - godox
    - golint
    - gomnd
    - interfacer
    - lll
    - maligned
    - nakedret
    - nlreturn
    - noctx
    - paralleltest
    - prealloc
    - scopelint
    - testpackage
    - wrapcheck
  disable-all: false
  # presets:
  #   - bugs
  #   - unused
  fast: false


issues:
  # List of regexps of issue texts to exclude, empty list by default.
  # But independently from this option we use default exclude patterns,
  # it can be disabled by `exclude-use-default: false`. To list all
  # excluded by default patterns execute `golangci-lint run --help`
  exclude:
    - 'can be .*testify/assert.TestingT'
    - 'declaration of "err" shadows declaration'
    # Global variables ending with Re should be ignored (like with Err and _).
    # See https://github.com/leighmcculloch/gochecknoglobals/issues/6
    - '`(\w+Re)` is a global variable'
    # It's recomended to do assert = assert.New(t)
    - "shadow of imported from 'github.com/stretchr/testify/assert' package 'assert'"

  # Independently from option `exclude` we use default exclude patterns,
  # it can be disabled by this option. To list all
  # excluded by default patterns execute `golangci-lint run --help`.
  # Default value for this option is true.
  exclude-use-default: true

  # Maximum issues count per one linter. Set to 0 to disable. Default is 50.
  max-issues-per-linter: 0

  # Maximum count of issues with the same text. Set to 0 to disable. Default is
  # 3.
  max-same-issues: 0

  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed, else only changes in HEAD~ are analyzed.
  # It's a super-useful option for integration of golangci-lint into existing
  # large codebase. It's not practical to fix all existing issues at the moment
  # of integration: much better don't allow issues in new code.
  # Default is false.
  new: false

# vim: set sw=2 ts=2 et:
